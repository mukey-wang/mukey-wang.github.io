<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mukey-wang.github.io</id>
    <title>Mukey&apos;s Blog</title>
    <updated>2021-06-11T01:35:05.509Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mukey-wang.github.io"/>
    <link rel="self" href="https://mukey-wang.github.io/atom.xml"/>
    <subtitle>今朝有酒今朝醉，明日愁来明日愁。</subtitle>
    <logo>https://mukey-wang.github.io/images/avatar.png</logo>
    <icon>https://mukey-wang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Mukey&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[EasyAnticheat的内存特征算法]]></title>
        <id>https://mukey-wang.github.io/post/easyanticheat-de-nei-cun-te-zheng-suan-fa/</id>
        <link href="https://mukey-wang.github.io/post/easyanticheat-de-nei-cun-te-zheng-suan-fa/">
        </link>
        <updated>2021-06-11T00:49:24.000Z</updated>
        <content type="html"><![CDATA[<p>anticheat一般都会有内存扫描的操作，来与数据库中的非法程序进行对比。<br>
在进行扫描前，ac会先判断地址是否正确<br>
<img src="https://mukey-wang.github.io/post-images/1623372850036.png" alt="" loading="lazy"><br>
判断是否是用户态的可读地址<br>
<img src="https://mukey-wang.github.io/post-images/1623372882447.png" alt="" loading="lazy"><br>
如果没问题，则进行内存特征的操作<br>
<img src="https://mukey-wang.github.io/post-images/1623372896229.png" alt="" loading="lazy"><br>
根据这个这个表，很容易知道这是hde的反汇编引擎,和crc的哈希<br>
<img src="https://mukey-wang.github.io/post-images/1623372953366.png" alt="" loading="lazy"><br>
<img src="https://mukey-wang.github.io/post-images/1623372969342.png" alt="" loading="lazy"><br>
<img src="https://mukey-wang.github.io/post-images/1623372985934.png" alt="" loading="lazy"></p>
<h2 id="具体步骤">具体步骤:</h2>
<blockquote>
<p>1.eac先根据获取当前附加进程的架构x86,还是x64<br>
<img src="https://mukey-wang.github.io/post-images/1623373059764.png" alt="" loading="lazy"><br>
2.接着开始循环遍历内存块,直到找到特定机器码起始的地址<br>
<img src="https://mukey-wang.github.io/post-images/1623373063231.png" alt="" loading="lazy"><br>
可以看到，x64是寻找sub rsp,xxxx /push rbp或者mov rbp,rsp 。x86则是寻找push ebp /mov ebp,esp<br>
3.如果找不到，则+0x10个字节继续寻找。如果找到了，先计算当前指令的crc(x64 4个字节,x86 3个字节,这里crc的初始值是0)，接着开始遍历下面的内存<br>
<img src="https://mukey-wang.github.io/post-images/1623373149012.png" alt="" loading="lazy"><br>
从上面找到地址来看，判断架构，x先用hde尝试获取指令长度，如果反汇编成功，64则判断是否是否0x48或0x0f开头，则crc 2个字节，否则只crc一个字节。x86同理,直到碰到inst_filter中的opcode为止,输出看一下<br>
<img src="https://mukey-wang.github.io/post-images/1623373493467.png" alt="" loading="lazy"><br>
碰到这些opcode则结束循环，并把计算的crc保存到全局数组中<br>
<img src="https://mukey-wang.github.io/post-images/1623373167981.png" alt="" loading="lazy"><br>
下面来仿写这个算法试试,对ntdll的.text段进行提取特征<br>
<img src="https://mukey-wang.github.io/post-images/1623373501585.png" alt="" loading="lazy"></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[仿制Getting Over It]]></title>
        <id>https://mukey-wang.github.io/post/fang-zhi-getting-over-it/</id>
        <link href="https://mukey-wang.github.io/post/fang-zhi-getting-over-it/">
        </link>
        <updated>2021-06-10T07:42:24.000Z</updated>
        <content type="html"><![CDATA[<p>项目地址：https://github.com/mukey-wang/GettingOverIt<br>
教程之后在写😇</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零开始数据结构1——基础算法]]></title>
        <id>https://mukey-wang.github.io/post/cong-ling-kai-shi-shu-ju-jie-gou-1-ji-chu-suan-fa/</id>
        <link href="https://mukey-wang.github.io/post/cong-ling-kai-shi-shu-ju-jie-gou-1-ji-chu-suan-fa/">
        </link>
        <updated>2021-06-10T06:35:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基础算法">基础算法</h2>
<h3 id="1-排序">1. 排序</h3>
<ul>
<li>
<p>快速排序</p>
<pre><code>  void quick_sort(int q[], int l, int r) {
      if (l &gt;= r) return;
      int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];
      while (i &lt; j){
          do i ++ ; while (q[i] &lt; x);
          do j -- ; while (q[j] &gt; x);
          if (i &lt; j) swap(q[i], q[j]);
      }
      quick_sort(q, l, j), quick_sort(q, j + 1, r);
  }
</code></pre>
</li>
<li>
<p>归并排序</p>
<pre><code>  void merge_sort(int q[], int l, int r) {
      if (l &gt;= r) return;
          int mid = l + r &gt;&gt; 1;
          merge_sort(q, l, mid);
          merge_sort(q, mid + 1, r);
          int k = 0, i = l, j = mid + 1;
          while (i &lt;= mid &amp;&amp; j &lt;= r)
              if (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];
              else tmp[k ++ ] = q[j ++ ];
          while (i &lt;= mid) tmp[k ++ ] = q[i ++ ];
          while (j &lt;= r) tmp[k ++ ] = q[j ++ ];
          for (i = l, j = 0; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];
      }
</code></pre>
</li>
</ul>
<h3 id="2-二分">2. 二分</h3>
<ul>
<li>
<p>整数二分</p>
<pre><code>  bool check(int x) {/* ... */} // 检查x是否满足某种性质

  // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：
  int bsearch_1(int l, int r) {
      while (l &lt; r){
          int mid = l + r &gt;&gt; 1;
          if (check(mid)) r = mid;    // check()判断mid是否满足性质
          else l = mid + 1;
      }
      return l;
  }
  // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：
  int bsearch_2(int l, int r) {
      while (l &lt; r){
          int mid = l + r + 1 &gt;&gt; 1;
          if (check(mid)) l = mid;
          else r = mid - 1;
      }
      return l;
  }
</code></pre>
</li>
<li>
<p>浮点二分</p>
<pre><code>  bool check(double x) {/* ... */} // 检查x是否满足某种性质

  double bsearch_3(double l, double r) {
      const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求
      while (r - l &gt; eps){
          double mid = (l + r) / 2;
          if (check(mid)) r = mid;
          else l = mid;
      }
      return l;
  }
</code></pre>
</li>
</ul>
<h3 id="3-高精度">3. 高精度<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h3>
<ul>
<li>
<p>高精度加法（L+L）</p>
<pre><code>  // C = A + B, A &gt;= 0, B &gt;= 0
  vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {
      if (A.size() &lt; B.size()) return add(B, A);

      vector&lt;int&gt; C;
      int t = 0;
      for (int i = 0; i &lt; A.size(); i ++ ) {
          t += A[i];
          if (i &lt; B.size()) t += B[i];
          C.push_back(t % 10);
          t /= 10;
      }

      if (t) C.push_back(t);
      return C;
  }
</code></pre>
</li>
<li>
<p>高精度减法（L-L）</p>
<pre><code>  // C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0
  vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {
      vector&lt;int&gt; C;
      for (int i = 0, t = 0; i &lt; A.size(); i ++ ) {
          t = A[i] - t;
          if (i &lt; B.size()) t -= B[i];
          C.push_back((t + 10) % 10);
          if (t &lt; 0) t = 1;
          else t = 0;
      }

      while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();
      return C;
  }
</code></pre>
</li>
<li>
<p>高精度乘法（L*N)</p>
<pre><code>  // C = A * b, A &gt;= 0, b &gt;= 0
  vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b) {
      vector&lt;int&gt; C;

      int t = 0;
      for (int i = 0; i &lt; A.size() || t; i ++ ) {
          if (i &lt; A.size()) t += A[i] * b;
          C.push_back(t % 10);
          t /= 10;
      }

      while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();

      return C;
  }
</code></pre>
</li>
<li>
<p>高精度除法（L/N）</p>
<pre><code>  // A / b = C ... r, A &gt;= 0, b &gt; 0
  vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r) {
      vector&lt;int&gt; C;
      r = 0;
      for (int i = A.size() - 1; i &gt;= 0; i -- ) {
          r = r * 10 + A[i];
          C.push_back(r / b);
          r %= b;
      }
      reverse(C.begin(), C.end());
      while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();
      return C;
  }
</code></pre>
</li>
</ul>
<h3 id="4-前缀和与差分">4. 前缀和与差分</h3>
<ul>
<li>
<p>一维前缀和</p>
<pre><code>  S[i] = a[1] + a[2] + ... a[i]
  a[l] + ... + a[r] = S[r] - S[l - 1]
</code></pre>
</li>
<li>
<p>二维前缀和</p>
<pre><code>  //S[i, j] = 第i行j列格子左上部分所有元素的和
  //以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：
  S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]
</code></pre>
</li>
<li>
<p>一维差分</p>
<pre><code>  //给区间[l, r]中的每个数加上c
  B[l] += c, B[r + 1] -= c
</code></pre>
</li>
<li>
<p>二维差分</p>
<pre><code>  //给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：
  S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c
</code></pre>
</li>
</ul>
<h3 id="5-双指针算法">5. 双指针算法</h3>
<pre><code>    for (int i = 0, j = 0; i &lt; n; i ++ ) {
        while (j &lt; i &amp;&amp; check(i, j)) j ++ ;
        // 具体问题的逻辑
    }
    //常见问题分类：
        //(1) 对于一个序列，用两个指针维护一段区间
        //(2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作
</code></pre>
<h3 id="6-位运算">6. 位运算</h3>
<pre><code>    //求n的第k位数字:
    n &gt;&gt; k &amp; 1
    //返回n的最后一位1：
    lowbit(n) = n &amp; -n
</code></pre>
<h3 id="7-离散化">7. 离散化</h3>
<pre><code>    vector&lt;int&gt; alls; // 存储所有待离散化的值
    sort(alls.begin(), alls.end()); // 将所有值排序
    alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素

    // 二分求出x对应的离散化的值

    // 找到第一个大于等于x的位置
    int find(int x) {
        int l = 0, r = alls.size() - 1;
        while (l &lt; r) {
            int mid = l + r &gt;&gt; 1;
            if (alls[mid] &gt;= x) r = mid;
            else l = mid + 1;
        }
        return r + 1; // 映射到1, 2, ...n
    }
</code></pre>
<h3 id="8-区间合并">8. 区间合并</h3>
<pre><code>    // 将所有存在交集的区间合并
    void merge(vector&lt;PII&gt; &amp;segs) {
        vector&lt;PII&gt; res;

        sort(segs.begin(), segs.end());

        int st = -2e9, ed = -2e9;
        for (auto seg : segs)
            if (ed &lt; seg.first) {
                if (st != -2e9) res.push_back({st, ed});
                st = seg.first, ed = seg.second;
            }
            else ed = max(ed, seg.second);

        if (st != -2e9) res.push_back({st, ed});

        segs = res;
    }</code></pre>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>L表示长度小于等于len(18)的数，N表示数的范围为int <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
</feed>